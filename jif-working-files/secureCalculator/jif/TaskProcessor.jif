package SecureCalculator;

import jif.util.List;

public final class TaskProcessor [principal Alice] authority (Alice) {

    int{Alice->*; Alice<-*} salary = 11;

    public Double{Alice->_; Alice<-*} process{Alice<-*}(List{} taskList) where authority(Alice) {
        List taskListE = endorse(taskList, {} to {Alice<-*});
        int result = salary;
        {
            int q = 0;
            try {
                q = taskListE.size();
            } catch (NullPointerException e) {
            }
            for (int i = 0; i < q; i++) {
                Object task;
                {
                    Object j = null;
                    try {
                        j = taskListE.get(i);
                    } catch (NullPointerException e) {
                    }
                    task = j;
                }
                {
                    int c = 0;
                    try {
                        c = ((Task) task).run(result);
                    } catch (NullPointerException e) {
                    }
                    result += c;
                }
            }
        }
        return declassify(result, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
    }
}
