package Jifs;

public class StatUtil [principal Alice] authority(Alice) {

    // SECRET
    int{Alice->*; Alice<-*} key = 5;

    // GATEWAY
    public Record{Alice->_; Alice<-*} process{Alice<-*}(Record{} rec) where authority(Alice) {
        Record recE = endorse(rec, {} to {Alice->*;Alice<-*});
        Record record = decrypt(recE, key);
        return declassify(record, {Alice->*;Alice<-*} to {Alice->_;Alice<-*});
    }

    public Record{Alice->*;Alice<-*} decrypt(Record{Alice->*;Alice<-*} record, int{Alice->*;Alice<-*} offset) {
            char[]{Alice->*;Alice<-*} cipher;
            {
                char[] x = null;
                try {
                    x = record.getData();
                } catch (NullPointerException e) {
                }
                cipher = x;
            }
            int len;
            {
                int y = 0;
                try {
                    y = cipher.length;
                } catch (NullPointerException e) {
                }
                len = y;
            }
            char[] result = new char[len];
            {
                int in = 0;
                try {
                    in = cipher.length;
                } catch (NullPointerException e) {
                }
                for (int i = 0; i < in; i++) {
                    char{Alice->*; Alice<-*} character;
                    {
                        char r = ' ';
                        try {
                            r = cipher[i];
                        } catch (NullPointerException e) {
                        } catch (ArrayIndexOutOfBoundsException e) {
                        }
                        character = r;
                    }
                    if (character != ' ') {
                        int originalAlphabetPosition = character - 'a';
                        int newAlphabetPosition = (originalAlphabetPosition + offset) % 26;
                        char{Alice->*; Alice<-*} newCharacter = (char) ('a' + newAlphabetPosition);
                        try {
                            result[i] = newCharacter;
                        } catch (NullPointerException e) {
                        } catch (ArrayIndexOutOfBoundsException e) {
                        }
                    } else {
                        try {
                            result[i] = character;
                        } catch (NullPointerException e) {
                        } catch (ArrayIndexOutOfBoundsException e) {
                        }
                    }
                }
            }
            return new Record(result);
    }
}
