package Jifs;

public class StatUtil_String [principal Alice] authority(Alice) {

    // @Secret
    private int{Alice->*; Alice<-*} key = 5;

    // @Gateway
    public Record_String{Alice->_; Alice<-*} process{Alice<-*}(Record_String{} rec) where authority(Alice) {
        Record_String recE = endorse(rec, {} to {Alice<-*});
        Record_String result = decrypt(recE, key);
        return declassify(result, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
    }

    public Record_String{Alice->*; Alice<-*} decrypt{Alice<-*}(Record_String{Alice<-*} record, int{Alice->*; Alice<-*} offset) {

            String cipher;
            {
                String x = null;
                try {
                    x = record.data;
                } catch (NullPointerException e) {
                }
                cipher = x;
            }
            int len;
            {
                int y = 0;
                try {
                    y = cipher.length();
                } catch (NullPointerException e) {
                }
                len = y;
            }
            String result = "";
            for (int i = 0; i < len; i++) {
                char character;
                {
                    char r = ' ';
                    try {
                        r = cipher.charAt(i);
                    } catch (NullPointerException e) {
                    } catch (StringIndexOutOfBoundsException e) {
                    }
                    character = r;
                }
                if (character != ' ') {
                    int originalAlphabetPosition = character - 'a';
                    int newAlphabetPosition = (originalAlphabetPosition + offset) % 26;
                    char newCharacter = (char) ('a' + newAlphabetPosition);
                    result += newCharacter;
                } else {
                    result += character;
                }
            }
            return new Record_String(result);
    }
}
