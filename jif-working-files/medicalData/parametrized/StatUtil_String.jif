public final class StatUtil [principal Alice] authority (Alice) {

    private int{Alice->*; Alice<-*} key = 5;

    public Record[Alice]{Alice->_; Alice<-*} process{Alice<-*}(Record[Alice]{} rec) where authority(Alice) {
        Record recE = endorse(rec, {} to {Alice<-*});
        Record result = decrypt(recE, key);
        return declassify(result, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
    }

    public Record[Alice]{Alice->*; Alice<-*} decrypt{Alice<-*}(Record[Alice]{Alice<-*} record, int{Alice->*; Alice<-*} offset) {
        String cipher;
        {
            String r = new String();
            try {
                r = record.getData();
            } catch (NullPointerException e) {
            }
            cipher = r;
        }
        int len;
        {
            int w = 0;
            try {
                w = cipher.length();
            } catch (NullPointerException e) {
            }
            len = w;
        }
        String result = "";
        for (int i = 0; i < len; i++) {
            char character;
            {
                char u = ' ';
                try {
                    u = cipher.charAt(i);
                } catch (NullPointerException e) {
                } catch (StringIndexOutOfBoundsException e) {
                }
                character = u;
            }
            if (character != ' ') {
                int originalAlphabetPosition = character - 'a';
                int newAlphabetPosition = (originalAlphabetPosition + offset) % 26;
                char newCharacter = (char) ('a' + newAlphabetPosition);
                result += newCharacter;
            } else {
                result += character;
            }
        }
        return new Record[Alice](result);
    }
}
