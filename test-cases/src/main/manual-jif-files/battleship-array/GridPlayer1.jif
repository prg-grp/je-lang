public final class GridPlayer1 [principal Alice] authority (Alice) {


   // boolean[]{Alice->*; Alice<-*} myGrid = new boolean[] { false, false, true, true, true, false, false, true, false, true };
   boolean{Alice->*; Alice<-*}[]{Alice->*; Alice<-*} myGrid = new boolean[] {false, false};

// boolean version

   /* public boolean{Alice->_; Alice<-*} applyOppsGuess{Alice<-*}(final int{} location) throws Exception where authority(Alice) {
           // int result = 0;
           int locationE = endorse(location, {} to {Alice<-*});
           if (locationE >= 0) {
               if (!myGrid[locationE]) {
                   // Battleship absent
                   result = -1;
               } else {
                   // Battleship present or Battleship hit by the opponent
                   result = 1;
                   // Battleship hit by the opponent
                   myGrid[locationE] = false;
               }
               if (allFalse()) {
                   // All battleships hit
                   result = 2;
               }
           }
           return declassify(result, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
       }

       private boolean allFalse() throws Exception where authority(Alice) {
           boolean allFalse = true;
           for (int i = 0; i < myGrid.length; i++) {
               if (myGrid[i]) {
                   allFalse = false;
                   break;
               }
           }
           return allFalse;
       }
*/

// int version
// ------------------------------------------ Code down below is working -------------------------------------------------
    public int{Alice->_; Alice<-*} applyOppsGuess{Alice<-*}(final int{} location) where authority(Alice) {
        int{Alice->*; Alice<-*}  result = 0;
        // int result = 0;
        int locationE = endorse(location, {} to {Alice<-*});
        try  {
            if (locationE >= 0) {
                if (!myGrid[locationE]) {
                    // Battleship absent
                    // result = declassify(-1, {Alice->*; Alice<-_} to {Alice->_;Alice<-_});
                    result = -1;
                } else {
                    // Battleship present or Battleship hit by the opponent
                    result = 1;
                    // Battleship hit by the opponent
                    myGrid[locationE] = false;
                }
                if (allFalse()) {
                    // All battleships hit
                    result = 2;
                }
            }
        } catch(Exception e) {
            /* int{Alice->_; Alice<-*}  resultUnusual = -2;
            // declassify({Alice->_; Alice<-*}) return declassify(resultUnusual, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
            declassify({Alice->_; Alice<-*}) return resultUnusual; */
            result = -2;
        }
         declassify({Alice->_; Alice<-*}) return declassify(result, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
    }

    private boolean{Alice->*; Alice<-*} allFalse() where authority(Alice) {
        boolean allFalse = true;
        try {
            for (int i = 0; i < myGrid.length; i++) {
                if (myGrid[i]) {
                    allFalse = false;
                    break;
                }
            }
        } catch (Exception e) {

        }
        return allFalse;
    }
}
