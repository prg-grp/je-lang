
import jif.util.*;

public class FilterNode [principal Alice, label L] authority (Alice)  {
    private String{Alice->*; Alice<-*} key;
    private Predicate predicate;

    public Boolean filter {Alice<-*} (EncIntEvent[{}]{} event) where authority(Alice) {

        endorse(event, {} to {Alice<-*}) if (sanitize(event))  {
            Boolean result;
            try {
                EncInt encInt = event.getVal();
                Integer val = decrypt(encInt, key);
                result = apply(predicate, val);
            } catch (Exception e) {
                return null;
             }
              return declassify(result, {Alice->*; Alice<-*} to {Alice->_; Alice<-*});
        } else {
            return declassify(null, {Alice->*} to {Alice->_});
        }
    }
    private Boolean apply(Predicate predicate, Integer value) {
        return new Boolean(true);
    }

    private boolean sanitize(EncIntEvent[{}]{} event) {
            return true;
    }

    private Integer decrypt(EncInt[{L}] encInt, String key) {
        return new Integer(1);
    }
}